'use strict';

var _ = require('lodash');
var assert = require('chai').assert;
var expect = require('chai').expect;

var getRandomInt = require('./getRandomInt');
var SlidingMedian = require('../../lib/common/slidingmedian');
var FrugalMedian = require('../../lib/common/frugalMedian');

describe('Sliding Median', function () {

    it('Empty Median returns 0', function () {
        var slidingMedian = new SlidingMedian();
        assert.equal(0, slidingMedian.estimate());
    });

    it('Single value median returns it', function () {
        var slidingMedian = new SlidingMedian();
        var x = getRandomInt(0, 100);
        slidingMedian.insert(x);
        assert.equal(x, slidingMedian.estimate());
    });

    function testSlidingMedian(rps, windowMs, bufferSize, n, errorRange) {
        // console.log('\n########\n');
        var deltaT = 1000 / rps;
        assert.isAtLeast(n * deltaT, windowMs,
            'You need to provide enough data to fill at least the window');

        var time = 0;
        var fakeClock = {
            now: function () { return time; }
        };

        var slidingMedian = new SlidingMedian({
            size: bufferSize,
            clock: fakeClock,
            windowMs: windowMs
        });
        time += 10;

        var i;
        for (i = 0; i < n; i++) {
            slidingMedian.insert(getRandomInt(0, 1000));
            time += 1000 / rps;
        }

        // console.log('intermediate median: ' + slidingMedian.estimate());

        var maxWindow = (windowMs/deltaT) >> 0;
        var buf = new Array(maxWindow);
        for (i = 0; i < n; i++) {
            var x = getRandomInt(100 * 1000, 1000 * 1000);
            slidingMedian.insert(x);
            buf[i % maxWindow] = x;
            time += 1000 / rps;
            var buf2 = buf.slice();
            buf2.sort(function (a, b) { return a - b; });
            var mid = Math.min(i / 2 >> 0, (buf2.length / 2) >> 0);
            // console.log('expected: ' + buf2[mid]
            //     + '\testimated: ' + slidingMedian.estimate()
            // );
        }
        buf.sort(function (a, b) { return a - b; });
        var expected = buf[(buf.length / 2) >> 0];
        var median = slidingMedian.estimate();
        console.log('median: ' + median + ', expected: ' + expected
            + ', error: ' + (100 * Math.abs(median - expected) / expected).toFixed(2) + '%');

        if (median < ((expected * (100 - errorRange) / 100) >> 0) ||
            median > ((expected * (100 + errorRange) / 100) >> 0)) {
                console.log(slidingMedian.toString());
                var bufMsg = '[';
                var k = 0;
                _.forEach(buf, function (y) {
                    bufMsg += '(' + k + ',' + y + '), '
                    k++;
                });
                console.log(bufMsg + ']');
        }

        expect(median).to.be.within(
            (expected * (100 - errorRange) / 100) >> 0,
            (expected * (100 + errorRange) / 100) >> 0
        );
    }

    it('median should be representative of the window whatever rps is used', function () {
        this.timeout(30 * 1000);

        // var data = [
        //     166, 602, 731, 454, 653, 819, 311, 873, 981, 749, 74, 798, 398, 759, 443, 942, 229, 568, 586, 605, 932, 497, 917, 100, 147, 544, 282, 952, 682, 660, 783, 394, 126, 231, 444, 824, 732, 960, 960, 377, 109, 223, 779, 777, 426, 36, 404, 680, 993, 935, 961, 819, 570, 570, 145, 751, 395, 401, 63, 292, 595, 12, 12, 457, 191, 188, 890, 129, 470, 291, 291, 180, 558, 881, 397, 851, 851, 699, 792, 279, 634, 953, 564, 564, 220, 923, 130, 491, 385, 385, 977, 547, 901, 79, 289, 289, 113, 457, 259, 42, 42, 82, 60, 387, 301, 301, 287, 669, 6, 723, 796, 796, 169, 357, 268, 78, 78, 526, 680, 216, 35, 35, 9, 416, 739, 909, 909, 780, 609, 756, 659, 659, 384, 179, 124, 619, 619, 720, 328, 345, 705, 705, 467, 576, 796, 300, 300, 410, 228, 591, 467, 467, 838, 135, 875, 410, 410, 533, 52, 881, 881, 250, 502, 374, 468, 468, 296, 533, 392, 622, 622, 928, 837, 125, 763, 763, 693, 43, 694, 694, 577, 908, 216, 128, 128, 544, 816, 592, 365, 365, 254, 536, 932, 932, 782, 306, 140, 944, 944, 62, 415, 257, 400, 400, 575, 554, 479, 479, 427, 280, 488, 401, 401, 991, 213, 490, 308, 308, 519, 726, 530, 530, 634, 815, 560, 47, 47, 500, 159, 743, 743, 266, 581, 214, 991, 991, 480, 181, 654, 798, 798, 826, 468, 911, 911, 683, 500, 72, 630, 630, 990, 765, 257, 257, 385, 255, 6, 27, 27, 426, 377, 238, 952, 952, 352, 590, 796, 796, 397, 54, 359, 643, 643, 15, 713, 603, 603, 645, 973, 340, 313, 313, 989, 576, 874, 180, 180, 547, 37, 25, 25, 476, 234, 913, 582, 582, 144, 173, 788, 788, 751, 787, 940, 103, 103, 155, 928, 153, 153, 142, 248, 638, 763, 763, 750, 961, 525, 408, 408, 674, 941, 795, 795, 309, 369, 586, 432, 432, 124, 829, 430, 430, 30, 172, 16, 763, 763, 725, 90, 268, 266, 266, 672, 7, 209, 209, 510, 69, 131, 54, 54, 215, 867, 575, 575, 536, 273, 485, 484, 484, 582, 634, 936, 936, 806, 949, 574, 69, 69, 470, 905, 967, 769, 769, 36, 962, 232, 232, 411, 361, 916, 66, 66, 374, 34, 336, 336, 275, 669, 104, 269, 269, 658, 367, 929, 929, 493, 959, 527, 975, 975, 389, 471, 714, 108, 108, 524, 978, 135, 135, 596, 789, 535, 364, 364, 853, 652, 713, 713, 484, 61, 279, 185, 185, 934, 589, 409, 409, 714, 890, 620, 690, 690, 679, 906, 885, 695, 695, 985, 375, 70, 70, 343, 845, 466, 993, 993, 738, 58, 594, 594, 152, 918, 905, 374, 374, 220, 506, 332, 332, 817, 934, 642, 733, 733, 258, 524, 833, 810, 810, 349, 503, 631, 631, 28, 126, 494, 56, 56, 448, 105, 18, 18, 618, 241, 486, 856, 856, 711, 506, 809, 809, 262, 484, 370, 263, 263, 870, 371, 725, 809, 809, 898, 743, 289, 289, 759, 387, 757, 949, 949, 245, 894, 785, 785, 633, 352, 833, 293, 293, 847, 769, 87, 87, 408, 337, 597, 713, 713, 64, 412, 29, 375, 375, 913, 24, 345, 345, 129, 688, 747, 2, 2, 595, 481, 192, 192, 815, 87, 329, 10, 10, 922, 498, 724, 724, 307, 416, 314, 584, 584, 726, 609, 828, 502, 502, 275, 162, 523, 523, 383, 681, 562, 73, 73, 515, 100, 235, 235, 180, 783, 556, 580, 580, 715, 538, 652, 652, 837, 523, 998, 395, 395, 597, 990, 142, 741, 741, 665, 171, 426, 426, 902, 723, 435, 628, 628, 684, 801, 200, 200, 42, 469, 214, 661, 661, 890, 810, 896, 896, 659, 721, 919, 545, 545, 511, 207, 317, 818, 818, 948, 749, 814, 814, 377, 771, 824, 149, 149, 850, 852, 491, 491, 814, 422, 151, 2, 2, 618, 978, 216, 216, 370, 391, 850, 114, 114, 4, 124, 895, 521, 521, 269, 916, 424, 424, 479, 435, 79, 866, 866, 824, 506, 238, 238, 796, 401, 87, 310, 310, 158, 397, 293, 293, 532, 491, 191, 390, 390, 560, 667, 943, 988, 988, 985, 261, 7, 7, 913, 688, 290, 497, 497, 160, 266, 974, 974, 640, 718, 984, 494, 494, 373, 310, 574, 574, 424, 373, 980, 434, 434, 944, 708, 32, 762, 762, 799, 440, 722, 722, 254, 413, 994, 169, 169, 199, 692, 409, 409, 140, 542, 588, 529, 529, 611, 993, 755, 755, 219, 157, 639, 594, 594, 270, 390, 536, 106, 106, 57, 504, 295, 295, 615, 941, 246, 172, 172, 241, 950, 142, 142, 665, 599, 949, 441, 441, 694, 378, 224, 224, 783, 575, 719, 482, 482, 178, 966, 797, 576, 576, 692, 112, 121, 121, 425, 405, 638, 946, 946, 331, 758, 271, 271, 458, 662, 56, 464, 464, 711, 861, 460, 460, 419, 209, 922, 569, 569, 534, 100, 573, 321, 321, 590, 391, 450, 450, 205, 779, 485, 690, 690, 290, 603, 837, 837, 287, 514, 315, 888, 888, 998, 696, 637, 637, 983, 988, 456, 5, 5, 779, 528, 157, 190, 190, 455, 404, 990, 990, 486, 972, 941, 272, 272, 656, 397, 12, 12, 144, 208, 614, 151, 151, 465, 121, 150, 150, 632, 564, 891, 807, 807, 645, 307, 186, 635, 635, 749, 292, 751, 751, 332, 768, 839, 15, 15, 359, 194, 338, 338, 511, 446, 109, 732, 732, 282, 165, 831, 831, 509, 289, 932, 571, 571, 447, 368, 273, 640, 640, 925, 322, 685, 685, 358, 678, 11, 391, 391, 832, 422, 438, 438, 31, 463, 835, 650, 650, 471, 478, 919, 919, 470, 413, 261, 361, 361, 701, 52, 732, 813, 813, 177, 451, 874, 874, 400, 438, 985, 23, 23, 913, 436, 183, 183, 476, 204, 847, 810, 810, 852, 565, 195, 195, 80, 497, 513, 491, 491, 283, 637, 467, 570, 570, 224, 106, 940, 940, 263, 354, 268, 514, 514, 137, 204, 848, 848, 888, 80, 193, 678, 678, 896, 289, 794, 794, 496, 180, 279, 499, 499, 973, 198, 963, 839, 839, 587, 104, 600, 600, 989, 77, 306, 172, 172, 804, 668, 736, 736, 767, 280, 134, 349, 349, 979, 159, 743, 743, 732, 534, 902, 511, 511, 484, 702, 815, 735, 735, 84, 38, 984, 984, 220, 647, 813, 777, 777, 186, 316, 41, 41, 315, 709, 546, 993, 993, 589, 928, 884, 884, 873, 218, 144, 108, 108, 879, 748, 340, 526, 526, 578, 913, 181, 181, 181, 372, 379, 661, 661, 437, 580, 366, 366, 508, 477, 535, 255, 255, 798, 127, 870, 870, 445, 217, 906, 913, 913, 329, 607, 72, 452, 452, 799, 108, 365, 365, 853, 536, 244, 524, 524, 303, 557, 180, 180, 904, 900, 825, 987, 987, 951, 587, 427, 427, 641, 230, 66, 348, 348, 354, 34, 4, 422, 422, 457, 332, 503, 503, 413, 727, 110, 210, 210, 375, 560, 114, 114, 746, 909, 409, 665, 665, 361, 298, 989, 989, 735, 167, 628, 263, 263, 992, 311, 373, 522, 522, 53, 894, 489, 489, 952, 227, 591, 438, 438, 385, 724, 268, 268, 717, 251, 369, 714, 714, 860, 546, 870, 870, 348, 159, 129, 61, 61, 53, 935, 696, 662, 662, 520, 263, 274, 274, 433, 427, 974, 839, 839, 43, 673, 107, 107, 772, 611, 671, 810, 810, 108, 431, 639, 639, 981, 262, 188, 672, 672, 423, 863132, 319611, 240236, 240236, 331115, 909289, 426301, 426301, 226267, 862774, 690250, 628557, 628557, 292607, 652481, 147860, 147860, 648880, 834796, 544427, 105730, 105730, 178608, 452707, 686823, 686823, 461975, 518374, 332859, 192623, 192623, 573817, 254649, 522075, 939801, 939801, 555067, 667339, 456237, 456237, 396295, 260013, 429405, 349652, 349652, 307541, 902420, 694442, 694442, 875480, 166289, 467789, 263565, 263565, 476323, 471429, 859536, 859536, 300107, 391226, 911660, 292313, 292313, 278160, 541877, 806864, 326184, 326184, 540831, 835609, 631240, 631240, 907158, 480778, 378251, 825361, 825361, 161900, 539961, 696889, 696889, 796742, 564360, 305518, 302951, 302951, 352388, 240466, 697685, 697685, 135805, 730493, 973304, 612766, 612766, 147138, 949066, 938635, 580016, 580016, 957955, 870365, 408405, 408405, 601957, 350280, 798752, 440925, 440925, 344253, 166085, 837123, 837123, 997846, 560225, 217976, 210618, 210618, 468312, 429249, 404068, 404068, 707668, 797485, 110640, 398806, 398806, 771489, 874649, 882732, 402688, 402688, 894732, 257061, 253563, 253563, 300365, 908620, 487783, 527607, 527607, 745612, 512790, 101764, 101764, 990806, 555807, 932754, 676125, 676125, 408104, 785713, 300781, 300781, 884762, 868628, 267871, 790000, 790000, 534997, 232450, 189285, 689151, 689151, 565114, 195030, 489310, 489310, 233428, 712830, 178481, 852076, 852076, 450781, 311998, 829828, 829828, 394108, 367605, 702626, 339504, 339504, 549255, 960440, 784196, 784196, 410462, 393503, 377183, 492525, 492525, 119638, 227974, 890003, 345107, 345107, 947299, 954529, 596560, 596560, 707969, 429652, 876775, 693140, 693140, 453960, 418807, 640661, 640661, 362810, 725562, 821830, 426550, 426550, 613073, 913673, 337633, 337633, 553661, 121554, 386218, 539108, 539108, 444728, 797881, 503315, 937482, 937482, 751774, 658864, 111286, 111286, 637092, 847173, 167067, 561722, 561722, 453800, 290192, 444660, 444660, 953981, 487421, 583106, 579618, 579618, 915293, 280837, 347171, 347171, 620907, 971449, 692029, 889223, 889223, 826580, 387052, 700746, 432972, 432972, 777623, 181517, 362364, 362364, 705805, 147570, 723424, 968293, 968293, 851660, 495168, 546847, 546847, 709116, 637662, 509326, 741510, 741510, 192610, 846970, 386645, 386645, 235094, 678897, 803888, 368070, 368070, 689922, 128571, 844167, 265699, 265699, 580008, 690762, 581221, 581221, 632363, 848639, 242292, 743727, 743727, 561573, 434817, 495528, 495528, 111076, 998001, 258245, 478756, 478756, 868398, 315906, 690394, 690394, 281317, 763648, 561315, 422612, 422612, 166141, 853380, 321164, 742458, 742458, 331118, 595777, 952885, 952885, 722548, 628497, 359451, 490346, 490346, 846555, 778919, 647642, 647642, 701047, 297057, 171100, 672192, 672192, 961122, 315365, 724434, 724434, 759999, 269988, 516405, 118244, 118244, 921870, 804929, 342493, 798812, 798812, 479921, 498270, 418947, 418947, 264821, 777702, 531294, 256721, 256721, 639929, 583917, 154656, 154656, 129130, 476814, 963610, 362210, 362210, 749118, 943970, 426741, 426741, 614242, 990550, 177814, 535779, 535779, 867489, 927014, 570119, 546025, 546025, 837929, 727262, 645422, 645422, 180637, 873222, 374127, 338853, 338853, 438103, 298023, 540321, 540321, 194621, 117964, 569265, 478420, 478420, 976378, 170597, 945996, 945996, 435198, 297901, 326606, 633215, 633215, 354572, 173046, 529777, 586633, 586633, 551346, 215443, 617975, 617975, 599753, 550821, 632797, 348089, 348089, 761134, 364979, 934010, 934010, 764103, 772867, 683529, 399633, 399633, 681232, 918435, 625692, 625692, 525978, 855105, 834414, 561747, 561747, 786410, 585111, 504959, 695905, 695905, 147724, 969037, 472761, 472761, 455721, 255088, 385111, 757159, 757159, 410289, 443874, 709064, 709064, 374738, 572510, 740122, 468961, 468961, 415137, 962797, 106171, 106171, 470158, 455164, 399347, 739390, 739390, 930702, 708689, 526217, 878987, 878987, 301854, 419928, 763935, 763935, 530671, 443417, 321083, 288496, 288496, 833063, 850973, 709658, 709658, 807910, 711600, 713876, 745913, 745913, 226564, 152772, 784923, 784923, 250839, 752257, 655901, 733149, 733149, 736883, 212964, 887864, 933223, 933223, 846354, 843727, 697291, 697291, 481189, 269525, 929180, 564714, 564714, 760817, 512611, 826714, 826714, 598242, 821530, 582997, 799953, 799953, 292944, 941569, 203705, 203705, 189343, 480853, 516044, 339066, 339066, 336775, 443731, 141369, 542073, 542073, 756303, 823263, 772772, 772772, 304461, 919540, 211657, 363203, 363203, 956978, 401842, 691175, 691175, 248085, 727810, 907623, 550833, 550833, 538215, 202892, 217311, 217311, 167679, 468925, 344820, 380020, 380020, 525224, 657067, 966299, 666577, 666577, 695316, 966864, 705136, 705136, 209429, 663436, 191206, 742235, 742235, 251683, 420221, 472269, 472269, 524408, 390680, 675963, 246019, 246019, 196072, 535183, 952673, 952673, 282224, 873229, 181058, 659630, 659630, 411241, 778582, 187474, 517930, 517930, 725930, 527681, 809061, 809061, 375921, 733535, 465415, 629076, 629076, 334275, 576902, 161735, 161735, 597937, 857682, 370968, 809960, 809960, 304309, 427324, 767919, 767919, 968281, 268584, 223725, 708799, 708799, 827485, 416558, 790937, 243832, 243832, 162810, 699997, 314566, 314566, 108624, 587802, 401706, 524803, 524803, 217047, 208905, 795296, 795296, 930079, 861938, 949076, 209902, 209902, 472949, 571427, 433568, 433568, 768948, 525087, 118225, 942047, 942047, 962303, 295667, 503785, 132977, 132977, 188601, 443457, 219881, 219881, 573936, 162912, 774321, 253801, 253801, 804068, 536244, 405120, 405120, 974620, 132519, 859153, 760630, 760630, 892990, 463277, 311108, 311108, 794327, 122123, 743134, 524823, 524823, 193976, 233386, 817500, 888925, 888925, 547673, 112193, 887747, 887747, 622326, 585555, 938484, 501589, 501589, 879044, 849451, 308876, 308876, 515691, 128024, 447332, 924088, 924088, 713965, 417793, 426880, 426880, 851676, 769757, 900312, 101464, 101464, 141888, 301191, 952186, 837073, 837073, 781999, 692692, 265950, 265950, 268404, 909963, 332911, 706341, 706341, 160410, 106195, 873511, 873511, 765241, 679075, 462314, 774131, 774131, 239282, 297348, 520649, 520649, 289422, 140082, 520469, 486764, 486764, 728433, 213098, 359076, 143420, 143420, 209100, 716388, 989507, 989507, 907272, 450587, 478055, 213451, 213451, 416303, 756296, 234254, 234254, 309445, 889748, 855913, 601958, 601958, 533194, 586746, 569955, 569955, 635472, 348299, 708804, 986614, 986614, 820733, 709476, 628282, 333323, 333323, 158042, 429228, 326894, 326894, 952199, 742169, 571229, 239554, 239554, 982775, 418200, 148284, 148284, 621588, 265487, 452470, 636381, 636381, 923721, 368582, 640208, 640208, 752955, 291143, 168366, 855184, 855184, 549794, 712391, 427542, 578456, 578456, 346420, 886289, 897723, 897723, 975439, 104355, 658821, 526950, 526950, 813349, 345352, 905068, 905068, 831364, 663300, 910504, 362565, 362565, 737043, 890429, 661435, 661435, 681118, 216476, 469696, 688180, 688180, 240858, 837667, 673546, 711127, 711127, 440528, 117991, 865650, 865650, 741094, 996297, 166448, 590432, 590432, 852751, 381011, 109825, 109825, 810745, 349676, 410441, 379724, 379724, 962218, 332934, 416864, 416864, 430644, 672361, 671111, 652184, 652184, 203798, 870333, 368846, 927486, 927486, 399865, 560740, 584682, 584682, 874284, 335556, 171206, 342625, 342625, 646601, 719838, 329197, 329197, 571144, 109842, 563554, 733541, 733541, 361650, 137930, 337156, 337156, 446824, 261946, 174675, 318356, 318356, 807047, 999857, 341106, 560527, 560527, 859603, 541282, 154170, 154170, 126599, 323791, 316124, 972844, 972844, 387879, 977379, 138530, 138530, 161142, 785406, 478959, 861595, 861595, 897615, 331874, 669065, 669065, 514127, 445838, 844576, 332591, 332591, 268064, 792200, 868528, 187645, 187645, 798531, 864351, 463595, 463595, 882731, 307222, 119504, 463926, 463926, 725764, 741597, 123967, 123967, 136503, 338223, 435537, 974191, 974191, 712915, 772883, 569714, 569714, 111371, 631749, 460921, 810955, 810955, 743301, 423196, 155026, 866811, 866811, 513734, 533829, 766796, 766796, 739720, 336369, 424897, 154722, 154722, 761007, 591688, 679699, 679699, 493883, 787528, 512059, 978683, 978683, 334317, 981946, 515855, 515855, 979696, 723943, 646824, 937317, 937317, 840424, 322983, 394670, 568662, 568662, 775982, 130393, 347277, 347277, 113837, 690673, 508008, 897606, 897606, 202471, 620095, 628431, 628431, 579897, 623591, 898834, 529727, 529727, 108187, 591019, 869139, 869139, 274000, 805760, 312531, 198460, 198460, 558692, 908823, 857771, 308096, 308096, 571523, 225088, 427868, 427868, 734176, 313187, 826775, 900156, 900156, 769391, 863554, 840073, 840073, 504314, 162033, 415337, 862750, 862750, 696403, 130307, 807029, 807029, 647375, 491091, 336616, 617614, 617614, 231404, 139768, 877703, 121194, 121194, 272482, 443500, 482616, 482616, 200646, 571099, 966664, 443321, 443321, 212493, 641725, 299135, 299135, 626309, 634493, 403515, 645253, 645253, 398069, 390880, 166438, 166438, 167000, 993672, 838002, 338687, 338687, 183465, 883457, 474643, 394793, 394793, 421982, 899793, 953849, 953849, 911191, 902352, 793557, 401218, 401218, 685613, 821687, 869656, 869656, 947566, 231595, 524829, 978185, 978185, 214500, 996309, 874075, 874075, 917698, 409188, 197524, 895274, 895274, 834125, 122547, 548173, 443953, 443953, 325003, 629724, 808337, 808337, 112213, 337649, 947716, 111938, 111938, 575714, 623741, 616735, 616735, 359759, 481465, 531893, 355758, 355758, 475865, 797495, 128645, 128645, 814260, 325132, 602423, 192755, 192755, 670553, 589876, 419922, 194704, 194704, 107964, 443569, 679354, 679354, 419331, 358971, 649109, 243871, 243871, 896874, 836568, 896615, 896615, 905712, 486838, 765308, 204612, 204612, 778535, 523435, 869873, 869873, 739379, 607790, 648888, 978285, 978285, 750337, 705117, 778515, 556757, 556757, 672350, 376897, 717566, 717566, 261714, 533070, 695837, 556447, 556447, 415988, 807130, 740696, 740696, 862421, 436184, 736117, 921535, 921535, 211704, 863332, 985786, 985786, 103889, 865450, 250810, 610767, 610767, 344887, 308690, 263176, 195108, 195108, 288458, 976968, 984963, 984963, 117307, 191592, 191550, 370428, 370428, 275901, 294385, 898878, 898878, 697929, 165689, 972214, 152175, 152175, 404092, 919335, 800775, 800775, 983203, 384023, 425935, 334272, 334272, 206990
        // ];

        // var time = 0;
        // var fakeClock = {
        //     now: function () { return time; }
        // };

        // var slidingMedian = new SlidingMedian({
        //     size: 32,
        //     clock: fakeClock,
        //     windowMs: 5000
        // });
        // time += 10;

        // var buf = [];
        // var i;
        // for (i = 0; i < data.length; i++) {
        //     var x = data[i];
        //     slidingMedian.insertOne(x);
        //     buf.push(x);
        //     if (buf.length > 25) {
        //         buf.shift();
        //     }

        //     var buf2 = buf.slice();
        //     buf2.sort(function (a, b) { return a - b; });

        //     var median = slidingMedian.estimate();
        //     var expected = buf2[buf2.length / 2 >> 0];
        //     var error = (100 * Math.abs(median - expected) / expected).toFixed(2) + '%'

        //     console.log('insert ' + x
        //         + ',\tmedian: ' + median
        //         + ',\treal: ' + expected
        //         + ',\terror: ' + error);
        //     console.log(slidingMedian.toString());
        //     var bufMsg = '[';
        //     var k = 0;
        //     _.forEach(buf, function (y) {
        //         bufMsg += '(' + k + ',' + y + '), '
        //         k++;
        //     });
        //     console.log(bufMsg + ']');
        //     var bufMsg2 = '[';
        //     k = 0;
        //     _.forEach(buf2, function (y) {
        //         bufMsg2 += '(' + k + ',' + y + '), '
        //         k++;
        //     });
        //     console.log(bufMsg2 + ']');

        //     time += 1000 / 5;
        // }


        // windowMs=128, RPmS=1 => we need a buffer of 128 elements
        // since size = 64, the sampling will be 1/2
        // testSlidingMedian(1000, 128, 64, 128, 25);

        // testSlidingMedian(10, 60000, 64, 1000, 25);
        // rps, windowMs, bufferSize, n, errorRange

        for (var i = 0; i < 100; i++) {
            // testSlidingMedian(5, 5000, 32, 1000, 35);
            // testSlidingMedian(12, 5000, 64, 1000, 20);
            testSlidingMedian(25, 5000, 128, 1000, 15);
            testSlidingMedian(250, 500, 128, 1000, 15);
        }
    });

    function compareError() {
        var time = 0;
        var slidingMedian = new SlidingMedian({
            clock: {
                now: function () { return time; }
            }
        });
        var frugalMedian = new FrugalMedian();
        var buffer = [];

        for (var i = 0; i < 300; i++) {
            var x = getRandomInt(10 * 1000, 1000 * 1000);
            slidingMedian.insert(x);
            frugalMedian.insert(x);
            buffer.push(x);
            time += 60000/128;
        }

        buffer.sort(function (a, b) {
            return a - b;
        });
        var expectedMedian = buffer[Math.floor(buffer.length / 2)];
        var estimatedMedian = slidingMedian.estimate();
        var streamingEstimation = frugalMedian.estimate();

        var error0 = Math.abs(estimatedMedian - expectedMedian);
        error0 /= expectedMedian;
        var error1 = Math.abs(streamingEstimation - expectedMedian);
        error1 /= expectedMedian;
        return [error0, error1];
    }

    it.only('Error rate with low number of entries is within acceptable bounds',
        function () {
            var sum0 = 0;
            var sum1 = 0;
            var n = 5;

            for (var i = 0; i < n; i++) {
                var errors = compareError();
                // console.log(i + ': ' + errors[0].toFixed(3) +
                //     ',\t' + errors[1].toFixed(3));
                sum0 += errors[0];
                sum1 += errors[1];
            }
            var avg0 = sum0 / n;
            var avg1 = sum1 / n;
            console.log('Sliding Median Error: ' + (100 * avg0).toFixed(2) +
                '%,\tFrugal Median Error: ' + (100 * avg1).toFixed(2) + '%');
            expect(avg0).to.be.within(0, 0.15);
            // expect(avg1).to.be.within(0, 0.50);
        });
});
